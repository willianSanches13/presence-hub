{"ast":null,"code":"import { EMPTY } from \"rxjs\";\nimport { environment } from 'src/environments/environment';\nimport { map, catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/common/http\";\nexport let AlunoService = /*#__PURE__*/(() => {\n  class AlunoService {\n    constructor(snackBar, http) {\n      this.snackBar = snackBar;\n      this.http = http;\n      this.baseUrl = `${environment.environmentbaseUrl}/alunos`;\n    }\n    showMessage(msg, isError = false) {\n      const snackBarRef = this.snackBar.open(msg, \"✖\", {\n        duration: 3000,\n        horizontalPosition: \"right\",\n        verticalPosition: \"top\",\n        panelClass: isError ? [\"msg-error\"] : [\"msg-success\"]\n      });\n      snackBarRef.onAction().subscribe(() => {\n        snackBarRef.dismiss();\n      });\n    }\n    create(Aluno) {\n      return this.http.post(this.baseUrl, Aluno).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n    }\n    read() {\n      return this.http.get(this.baseUrl).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n    }\n    readById(id) {\n      const url = `${this.baseUrl}/${id}`;\n      return this.http.get(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n    }\n    update(Aluno) {\n      const url = `${this.baseUrl}/${Aluno.id}`;\n      return this.http.put(url, Aluno).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n    }\n    delete(id) {\n      const url = `${this.baseUrl}/${id}`;\n      return this.http.delete(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n    }\n    buscarEndereco(cep) {\n      return this.http.get(`https://viacep.com.br/ws/${cep}/json/`).pipe(map(data => data), catchError(e => this.errorHandler(e)));\n    }\n    errorHandler(e) {\n      this.showMessage(\"Ocorreu um erro!\", true);\n      return EMPTY;\n    }\n    static #_ = this.ɵfac = function AlunoService_Factory(t) {\n      return new (t || AlunoService)(i0.ɵɵinject(i1.MatSnackBar), i0.ɵɵinject(i2.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AlunoService,\n      factory: AlunoService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return AlunoService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}